name: SonarCloud PR Analysis & AI PR Reviewer

on:
  pull_request:
    branches:
      - main  # Analyze PRs targeting main

permissions:
  contents: read
  pull-requests: write

jobs:
  sonarcloud: 
    name: Run SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ‚úÖ Ensures full Git history for SonarCloud

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Run SonarCloud Analysis
        run: mvn sonar:sonar -D"sonar.organization=savleenkaur04" -D"sonar.projectKey=SavleenKaur04_SonarDemo2" -D"sonar.host.url=https://sonarcloud.io" -D"sonar.pullrequest.key=${{ github.event.pull_request.number }}" -D"sonar.pullrequest.branch=${{ github.head_ref }}" -D"sonar.pullrequest.base=${{ github.base_ref }}" -D"sonar.qualitygate.wait||true"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  fetch-sonar-issues:
    name: Fetch SonarCloud Issues & Post Inline Comments
    needs: sonarcloud
    runs-on: ubuntu-latest

    steps:
      - name: Fetch SonarCloud Issues
        id: fetch_issues
        run: |
          PR_KEY=${{ github.event.pull_request.number }}
          PROJECT_KEY=SavleenKaur04_SonarDemo2
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          API_URL="https://sonarcloud.io/api/issues/search?componentKeys=${PROJECT_KEY}&pullRequest=${PR_KEY}"

          echo "Fetching SonarCloud issues from: $API_URL"

          # Fetch issues and validate response
          RESPONSE=$(curl -s -u ${SONAR_TOKEN}: "${API_URL}")
          echo "$RESPONSE" > sonar_issues.json

          # Check if JSON is empty or invalid
          if [ ! -s sonar_issues.json ] || ! jq empty sonar_issues.json 2>/dev/null; then
            echo "‚ùå No valid issues found. Exiting."
            exit 0
          fi

          echo "‚úÖ Successfully fetched SonarCloud issues."

      - name: Post SonarCloud Issues as PR Comments
        env:
          INLINE_COMMENT: ${{ secrets.INLINE_COMMENT }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          SONAR_ISSUES_FILE="sonar_issues.json"

          echo "üîç Checking SonarCloud issues..."
          cat $SONAR_ISSUES_FILE  # ‚úÖ Print file contents to confirm it's correct

          # ‚úÖ Ensure file is valid before processing
          if [ ! -s "$SONAR_ISSUES_FILE" ]; then
            echo "‚ùå No issues found. Exiting."
            exit 0
          fi

          if ! jq empty "$SONAR_ISSUES_FILE" 2>/dev/null; then
            echo "‚ùå JSON parsing failed. Exiting."
            exit 1
          fi

          # ‚úÖ Extract and process issues
          ISSUES=$(jq -c '.issues[] // empty' "$SONAR_ISSUES_FILE" || echo "[]")

          for ISSUE in $ISSUES; do
            FILE=$(echo "$ISSUE" | jq -r '.component' | sed 's/.*://')
            LINE=$(echo "$ISSUE" | jq -r '.line')
            MESSAGE=$(echo "$ISSUE" | jq -r '.message')

            echo "‚úÖ Extracted Issue: File=$FILE, Line=$LINE, Message=$MESSAGE"

            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              echo "‚ùå Skipping issue because FILE is missing"
              continue
            fi
            if [[ "$LINE" == "null" || -z "$LINE" ]]; then
              echo "‚ùå Skipping inline comment because LINE is missing"
              continue
            fi

            echo "üìå Posting inline comment for $FILE at line $LINE..."

            # ‚úÖ Correct commit SHA
            COMMIT_ID=${{ github.event.pull_request.head.sha }}

            PAYLOAD=$(jq -n \
              --arg commit_id "$COMMIT_ID" \
              --arg path "$FILE" \
              --argjson line "$LINE" \
              --arg body "üîç **SonarCloud Issue:** $MESSAGE" \
              '{commit_id: $commit_id, path: $path, line: $line, body: $body}')

            COMMENT_URL="https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/comments"

            RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST -H "Authorization: Bearer $INLINE_COMMENT" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "$COMMENT_URL")

            echo "üîç GitHub API Response Code: $RESPONSE"
            echo "üîç GitHub API Response Body:"
            cat response.json  # ‚úÖ Print GitHub API response for debugging
          done
