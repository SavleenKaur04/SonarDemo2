name: SonarCloud PR Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write  # Ensures permissions to post comments on PRs

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Verify Maven Installation
        run: mvn -version

      - name: Build with Maven
        run: mvn clean verify

      - name: SonarCloud Scan
        run: mvn sonar:sonar -D"sonar.host.url=https://sonarcloud.io" -D"sonar.organization=savleenkaur04" -D"sonar.projectKey=SavleenKaur04_SonarDemo2" -D"sonar.pullrequest.branch=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}" -D"sonar.pullrequest.base=main" -D"sonar.pullrequest.key=${{ github.event.pull_request.number }}"
        env:
          SONAR_TOKEN_VALUE: ${{ secrets.SONAR_TOKEN_VALUE }}

      - name: Fetch SonarCloud Issues and Post Comments
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          REPO=$(jq --raw-output .repository.full_name "$GITHUB_EVENT_PATH")
          COMMIT_ID=$(jq --raw-output .pull_request.head.sha "$GITHUB_EVENT_PATH")

          # Fetch all issues from SonarCloud
          SONAR_API="https://sonarcloud.io/api/issues/search?componentKeys=SavleenKaur04_SonarDemo2&types=BUG,CODE_SMELL,VULNERABILITY&statuses=OPEN,CONFIRMED&severities=INFO,MINOR,MAJOR,CRITICAL,BLOCKER&p=1&ps=500"
          echo "Fetching issues from SonarCloud API..."
          ISSUES=$(curl -s -u "${{ secrets.SONAR_TOKEN_VALUE }}:" "$SONAR_API")

          # Debugging API response
          echo "Raw SonarCloud API Response:"
          echo "$ISSUES" | jq '.'

          # Verify the number of issues returned
          ISSUE_COUNT=$(echo "$ISSUES" | jq '.issues | length')
          echo "Total issues detected: $ISSUE_COUNT"

          # Exit if no issues are found
          if [ "$ISSUE_COUNT" -eq 0 ]; then
            echo "No issues found. Exiting."
            exit 0
          fi

          # Process each issue and post a comment
          echo "$ISSUES" | jq -c '.issues[]' | while read issue; do
            RULE=$(echo "$issue" | jq -r '.rule')
            MESSAGE=$(echo "$issue" | jq -r '.message')
            FILE=$(echo "$issue" | jq -r '.component' | sed 's/.*://')
            LINE=$(echo "$issue" | jq -r '.line')

            echo "Processing Issue: Rule=$RULE, Message=$MESSAGE, File=$FILE, Line=$LINE"

            # Post general comment if no line number is detected
            if [ "$LINE" == "null" ] || [ -z "$LINE" ]; then
              echo "No line number detected. Posting general PR comment."
              PAYLOAD=$(jq -n --arg body "üîç **SonarCloud Issue:** $MESSAGE\n\n**File:** \`$FILE\`" '{body: $body}')
              COMMENT_URL="https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments"

              RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${{ secrets.INLINE_COMMENT }}" \
                -H "Content-Type: application/json" \
                -d "$PAYLOAD" \
                "$COMMENT_URL")
              echo "General comment response: $RESPONSE"
              continue
            fi

            # Post inline comment for issues with line numbers
            PAYLOAD=$(jq -n \
              --arg commit_id "$COMMIT_ID" \
              --arg path "$FILE" \
              --argjson line "$LINE" \
              --arg body "üîç **$RULE**: $MESSAGE" \
              '{commit_id: $commit_id, path: $path, line: $line, body: $body}')

            COMMENT_URL="https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/comments"

            RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${{ secrets.INLINE_COMMENT }}" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "$COMMENT_URL")
            echo "Inline comment response: $RESPONSE"
          done
        env:
          INLINE_COMMENT: ${{ secrets.INLINE_COMMENT }}
